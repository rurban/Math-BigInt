See also various .pm files.

General:
 * Copy on write (helps for $x = -$x; cases etc)

Math::BigFloat:
 * ! bround(): some bugs may lurk in there (warnings)
 * have a look at fsqrt() and it's performance
 * ! bmod() 
 * accuracy() & precision() maybe not finished (bnorm() in every op, testcases)
 * do not reduce numbers in new(), rather do it in anything that outputs it
   like bsstr(), bstr(), mantissa(), exponent() and parts(). Reducing the
   number after each op is slow with a binary core math lib like BitVect.

Math::BigFloat::Constant:
 * really needed by someone out there?

Math::BigInt:
 * objectify() is too slow and questionable (actually, it are only a few
   percent overhead...still)
 * bround() gives wierd results for -$scale, abs($scale) > $len), and is only
   used by MBF for -$scale = -$len, anyway. POD is wrong for this, too.
 * inf handling may not complete
 * +5 % 0 or -5 % 0 == NaN (should it be something else?)

Given the fact that we are be able to plug-in a much faster core-lib, the
following are pretty much ultra-low-priority:

Math::BigInt::Calc:
 * bpow() could be faster by not using div() (pre-shift only last array elem?)
 * ++,-- could be faster in Bigint via hardcoded (manual) increment
 * look at div() for more speed
 * band() etc. could use more bits (making it 32 instead of 16: double speed) 

Please send me test-reports, your experiences with this and your ideas - I love
to hear about my work!

Tels <http://bloodgate.com/>
